{"version":3,"sources":["components/Navbar.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPaga.tsx","pages/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","props","useState","title","setTitle","onChange","e","target","value","onKeyPress","key","onAdd","type","id","placeholder","htmlFor","TodoList","todos","onToggle","onRemove","length","map","todo","classes","completed","push","join","checked","onClick","event","preventDefault","removeHandler","TodosPage","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","window","confirm","filter","AboutPage","history","useHistory","App","component","path","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.276d7b58.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const Navbar: React.FC = () => (\r\n  <nav>\r\n    <div className=\"nav-wrapper brown darken-3 p1px\">\r\n      <a href=\"/\" className=\"brand-logo\">Ts + React</a>\r\n      <ul className=\"right hide-on-med-and-down\">\r\n        <li><NavLink to=\"/\">Todo list</NavLink></li>\r\n        <li><NavLink to=\"/about\">Information</NavLink></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n)","import React, { useState, useRef } from 'react';\r\n\r\ninterface TodoFormProps {\r\n    onAdd(title: string): void\r\n}\r\n\r\nexport const TodoForm: React.FC<TodoFormProps> = props => {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.target.value)\r\n    }\r\n    const handleEnterClick = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            props.onAdd(title);\r\n            setTitle('')\r\n        }\r\n    }\r\n    return <div className='input-field mt2'>\r\n        <input\r\n            onChange={handleChange}\r\n            onKeyPress={handleEnterClick}\r\n            value={title}\r\n            type='text'\r\n            id='title'\r\n            placeholder='Enter purpose' />\r\n        <label htmlFor='title' className='active'>Enter purpose</label>\r\n    </div>\r\n}","import React from 'react';\r\nimport { ITodo } from '../interfaces';\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onToggle(id: number): void\r\n    onRemove: (id: number) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({ todos, onToggle, onRemove }) => {\r\n\r\n\r\n    if(todos.length === 0) { \r\n        return <p className='center'>Empty list</p>\r\n    }\r\n\r\n    const removeHandler = (event: React.MouseEvent, id: number) => {\r\n        event.preventDefault()\r\n        onRemove(id)\r\n    }\r\n\r\n    return <ul>\r\n        {todos.map(todo => {\r\n\r\n            const classes = ['todo']\r\n            if (todo.completed) {\r\n                classes.push('completed')\r\n            }\r\n\r\n            return <li className={classes.join(' ')} key={todo.id}>\r\n                <label>\r\n                    <input\r\n                        type='checkbox'\r\n                        checked={todo.completed}\r\n                        onClick={() => onToggle(todo.id)} />\r\n                    <span>{todo.title}</span>\r\n                    <i\r\n                        className='material-icons red-text'\r\n                        onClick={event => removeHandler(event, todo.id)}\r\n                    >\r\n                        delete</i>\r\n                </label>\r\n            </li>\r\n        })}\r\n    </ul>\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { TodoForm } from '../components/TodoForm';\r\nimport { TodoList } from '../components/TodoList';\r\nimport { ITodo } from '../interfaces';\r\n\r\n\r\nexport const TodosPage: React.FC = () => {\r\n\r\n  const [todos, setTodos] = useState<ITodo[]>([])\r\n\r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[]\r\n\r\n    setTodos(saved)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('todos', JSON.stringify(todos))\r\n\r\n  }, [todos])\r\n\r\n  const addHandler = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      title: title,\r\n      id: Date.now(),\r\n      completed: false\r\n    }\r\n    setTodos(prev => [newTodo, ...prev])\r\n  }\r\n\r\n  const toggleHandle = (id: number) => {\r\n    setTodos(prev => prev.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.completed = !todo.completed\r\n      }\r\n      return todo\r\n    }))\r\n  }\r\n\r\n  const removeHandler = (id: number) => {\r\n    const shoudRemove = window.confirm('Are you sure you want to delete the element?')\r\n    if (shoudRemove) {\r\n      setTodos(prev => prev.filter(todo => todo.id !== id))\r\n    }\r\n  }\r\n\r\n  return <>\r\n    <TodoForm onAdd={addHandler} />\r\n    <TodoList\r\n      todos={todos}\r\n      onRemove={removeHandler}\r\n      onToggle={toggleHandle} />\r\n    </>\r\n}","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const AboutPage: React.FC = () => {\r\n  const history  = useHistory();\r\n  return <>\r\n  <h1>Inforation</h1>\r\n  <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vel, consequatur accusamus rem dolorem dicta repudiandae quia molestiae nihil non voluptatum!</p>\r\n  <button className='btn' onClick={() => history.push('/')}>Return to todos</button>\r\n  </>\r\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport { TodosPage } from './pages/TodosPaga';\nimport { AboutPage } from './pages/AboutPage';\n\nconst App: React.FC = () => {\n\n  return <>\n    <BrowserRouter>\n      <Navbar />\n      <div className='container'>\n        <Switch>\n          <Route component={TodosPage} path='/' exact />\n          <Route component={AboutPage} path='/about' />\n        </Switch>\n      </div>\n    </BrowserRouter>\n\n  </>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}